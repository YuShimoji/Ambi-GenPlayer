{"title":"[Setup] プロジェクトのファイル構造と基本設定 (SYS-01)","body":"`README.md` で定義されたファイル構造をローカルに作成し、基本的なHTMLとJSの連携を確認できる状態にする。\n\n受入条件:\n- `index.html` が作成されている。\n- `src/js/main.js`, `src/js/audio-engine.js`, `src/js/ui-handler.js` が作成され、`index.html` から読み込まれている。\n- ブラウザで `index.html` を開いた際に、コンソールエラーが発生しない。","labels":["phase-1","setup","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[AE] 複数音源の同時再生 (AE-01)","body":"複数のオーディオファイルをロードし、独立したトラックとして同時に再生・ループさせる機能を実装する。\n\n受入条件:\n- `AudioEngine` クラスに、複数のトラックを管理する機能がある。\n- 指定した複数の音源ファイルを非同期でロードできる。\n- すべてのロード済み音源を同時に再生開始できる。\n- 各音源はループ再生が可能である。","labels":["phase-1","audio-engine","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[AE] トラック別音量制御 (AE-02)","body":"再生中の各オーディオトラックの音量を個別に調整できる機能を実装する。\n\n受入条件:\n- `AudioEngine` クラスに、トラックIDや名前を指定して音量を変更するメソッドがある。\n- 音量値は 0.0 から 1.0 の間で設定できる。","labels":["phase-1","audio-engine","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[AE] マスター音量制御 (AE-03)","body":"全トラックを統合的に制御するマスター音量（Master Gain）を実装する。\n\n受入条件:\n- `AudioEngine` にマスター音量を管理するゲインノード（`masterGain`）が存在する。\n- `setMasterVolume(volume)` メソッドがあり、0.0〜1.0 の範囲でリアルタイムに音量を変更できる。\n- マスター音量変更が、すべてのトラックに反映される。","labels":["phase-1","audio-engine","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[UI] 基本再生コントロール (UI-01)","body":"UI上に、全トラックの「再生」「一時停止（または停止）」を行う基本操作ボタンを実装し、`AudioEngine` に連携する。\n\n受入条件:\n- UIに「再生」「一時停止（停止）」ボタンが表示される。\n- 「再生」ボタンで `AudioEngine.playAll()` が呼び出される。\n- 「一時停止（停止）」ボタンで `AudioEngine.pauseAll()` が呼び出される。","labels":["phase-1","ui","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[UI] マスター音量スライダー (UI-02)","body":"UI上に、0.0〜1.0 の範囲で操作できるマスター音量スライダーを実装し、`AudioEngine.setMasterVolume()` に連携する。\n\n受入条件:\n- マスター音量スライダーが表示され、操作可能である。\n- スライダーの値が変化すると、`AudioEngine.setMasterVolume(value)` が呼ばれる。\n- 現在値がUI上に表示される（例: 数値または%表示）。","labels":["phase-1","ui","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[UI] トラック別音量スライダー (UI-03)","body":"ロードされた各トラックごとに音量スライダーを表示し、`AudioEngine.setTrackVolume(trackId, volume)` に連携する。\n\n受入条件:\n- トラックごとの音量スライダーUIが動的に生成・表示される。\n- スライダー操作で該当トラックの音量が変更される。\n- トラックIDや表示名がUI上で識別できる。","labels":["phase-1","ui","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[Logic] タグベースの音源管理 (ML-01)","body":"音源にタグ（例: ambient, rain, piano など）を付与し、タグの組み合わせで再生セットを構築・切り替えできるロジックを実装する。\n\n受入条件:\n- 音源とタグのマッピングを保持するデータ構造が定義されている。\n- 指定タグ群で対象トラック一覧を取得できるAPI（関数）がある。\n- タグでフィルタしたトラック群をまとめてロード・再生開始できるユーティリティがある。","labels":["phase-1","logic","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[UI] ドラッグ＆ドロップで音声追加 (UI-04)","body":"ユーザーがローカルの音声ファイルをウィンドウへドラッグ＆ドロップすると、プレイヤーにトラックとして追加され、トラック別音量スライダーが生成される。追加したトラックはループ再生とマスター/個別音量制御の対象となる。\n\n受入条件:\n- 画面にドロップゾーンが表示され、ドラッグ中はハイライトされる。\n- 音声ファイル（複数同時可）をドロップするとトラックとして登録される（`AudioEngine.loadTrack(objectURL, trackId)`）。\n- ドロップ直後に UI にトラック別スライダーが生成され、音量調整が可能。\n- 不正なファイルは無視し、コンソールに警告を出す（アプリが落ちない）。\n- 追加されたトラックは `playAll()/pauseAll()` に連動し、ループ再生される。","labels":["phase-1","ui","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[UI] 音源の波形表示機能 (UI-05)","body":"各トラックの再生状況（波形・再生位置）を視覚的に表示する。\n\n受入条件:\n- 各トラックに波形表示コンポーネント（Canvas等）が表示される。\n- 再生/一時停止に追従して再生位置インジケータが更新される。\n- DnDで追加されたトラックにも波形が表示される。\n- 表示は軽快に動作し（目安30〜60fps）、UI操作のレスポンスを阻害しない。","labels":["phase-1","ui","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[AE] クロスフェードループ機能 (AE-04)","body":"トラックのループ再生時、つなぎ目で短いクロスフェードを行い、クリック音や段差を抑制する。\n\n受入条件:\n- フェード長（ms）を指定できる（デフォルト値あり）。\n- ループ境界のクリック/段差が実用上目立たないレベルに低減される。\n- 既存のマスター/トラック音量制御と競合しない。","labels":["phase-1","audio-engine","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[AE][Experimental] ランダム・クロスフェードループ (AE-05)","body":"ループ位置と長さをランダム化し、予測不能な音響を生成する。再生中のテクスチャが単調にならないよう工夫する。\n\n受入条件:\n- ループ開始位置・長さを所定の範囲でランダム化できる（最小/最大の上下限を設定可能）。\n- 同一シード値で再現可能なランダム化設定を提供（任意）。\n- クロスフェードループ（#11）と組み合わせても破綻しない。","labels":["phase-1","audio-engine","enhancement"],"milestone":"Phase 1 (MVP) Release"}
{"title":"[Architecture] エフェクト拡張の土台づくり (ARCH-01)","body":"将来的にリバーブやフィルタ等のエフェクトを追加可能にするため、拡張しやすいオーディオグラフ構成とインターフェースを整備する。\n\n受入条件:\n- トラック/マスターそれぞれにエフェクトチェーンを差し替え可能な抽象インターフェースを定義。\n- バイパス/有効化の切替APIを用意し、既存機能（再生・音量）と共存できる。\n- 実装の最小例として、ダミー（ゲイン調整など）を1つ導入して動作確認。","labels":["phase-1","audio-engine","logic","enhancement"],"milestone":"Phase 1 (MVP) Release"}
